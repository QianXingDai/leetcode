class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Character> stack = new Stack<Character>();
        if(k == num.length())
            return "0";
        
        for(int i = 0; i < num.length(); i++)
        {
            //  碰到一个字符比它前面的字符小,则删除它前面那个字符,保证栈元素尽可能递增
            while(k > 0 && !stack.isEmpty() && stack.peek() > num.charAt(i))
            {
                stack.pop();
                k--;
            }
            stack.push(num.charAt(i));
        }
        
        //  特殊情况,比如"111111"
        while(k > 0)
        {
            stack.pop();
            k--;
        }
        
        
        //  从栈中提取元素组合成新的字符串
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty())
            sb.append(stack.pop());
        //  逆序
        sb.reverse();             
        
        //  删除前面的0
        while(sb.length() > 1 && sb.charAt(0) == '0')
            sb.deleteCharAt(0);
        
        return sb.toString();
        
    }
}
